{
	"info": {
		"_postman_id": "7dc314cc-168a-4ec3-87ed-3a4b13eb8d32",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24612203"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Right answer\", () => pm.response.text = (\"This is the first responce from server!ss\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Ip_port}}/first",
					"host": [
						"{{Ip_port}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check Name\", ()=> pm.expect(resp_f.name).to.eql(\"vladimir\"))\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () { \r",
							"    pm.expect(+resp_f.age).to.eql(33);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () { \r",
							"    pm.expect(resp_f.family.u_salary_1_5_year).to.eql(2000);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"let req_f = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check Name2\", function () {\r",
							"    pm.expect(resp_f.name).to.eql(req_f.name)\r",
							"});\r",
							"console.log(req_f.name)\r",
							"console.log(resp_f.name)\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () { \r",
							"    pm.expect(resp_f.age).to.eql(req_f.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () { \r",
							"    pm.expect(resp_f.salary).to.eql(+req_f.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(resp_f.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check salary 1.5 year\", function () { \r",
							"    pm.expect(resp_f.family.u_salary_1_5_year).to.eql(req_f.salary*4);\r",
							"});\r",
							"\r",
							"// pm.test(\"Check child_2 name\", function () { \r",
							"//     pm.expect(resp_f.family.children[1][0]).to.eql(\"Kate\");\r",
							"// });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "vladimir",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{Ip_port}}/user_info_3",
					"host": [
						"{{Ip_port}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vladimir",
							"disabled": true
						},
						{
							"key": "age",
							"value": "33",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "500",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_f =  pm.request.url.query.toObject() \r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(req_f.name).to.eql(resp_f.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(req_f.age).to.eql(resp_f.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(+req_f.salary).to.eql(resp_f.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(resp_f.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog have a name\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog).to.have.any.key(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have an age\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog).to.have.any.key(\"age\");\r",
							"});\r",
							"\r",
							"// 9,10\r",
							"pm.test(\"Dog have a name & age\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog).to.have.all.keys(\"name\", \"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog's name\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog's age\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Ip_port}}/object_info_3?name=vladimir&age=33&salary=500",
					"host": [
						"{{Ip_port}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "vladimir"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function(){\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function(){\r",
							"    pm.expect(resp.age).to.eql(+req.age)\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function(){\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary)\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary2\", function(){\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary * 2)\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary3\", function(){\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary * 3)\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", +resp.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", +resp.salary[0])\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < resp.salary.length; i += 1)\r",
							"    console.log(resp.salary[i])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Ip_port}}/object_info_4?name=vladimir&age=33&salary=500",
					"host": [
						"{{Ip_port}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "vladimir"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let resp_u2 = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let req_u2 = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"have start_qa_salary\", function(){\r",
							"    pm.expect(resp_u2).to.have.a.property(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"have qa_salary_after_6_months\", function(){\r",
							"    pm.expect(resp_u2).to.have.a.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"have qa_salary_after_12_months\", function(){\r",
							"    pm.expect(resp_u2).to.have.any.keys(\"qa_salary_after_12_months\")\r",
							"})\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"have qa_salary_after_1.5_year\", function(){\r",
							"    pm.expect(resp_u2).to.have.any.keys(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"have qa_salary_after_3.5_years\", function(){\r",
							"    pm.expect(resp_u2).to.have.any.keys(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"have person\", function(){\r",
							"    pm.expect(resp_u2).to.have.any.keys(\"person\")\r",
							"})\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check start_qa_salary\", function(){\r",
							"    pm.expect(+resp_u2.start_qa_salary).to.eql(+req_u2.salary)\r",
							"})\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check qa_salary_after_6_months\", function(){\r",
							"    pm.expect(resp_u2.qa_salary_after_6_months).to.eql(+req_u2.salary*2)\r",
							"})\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"chack qa_salary_after_12_months\", function(){\r",
							"    pm.expect(resp_u2.qa_salary_after_12_months).to.eql(+req_u2.salary*2.7)\r",
							"})\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"check qa_salary_after_1.5_year\", function(){\r",
							"    pm.expect(resp_u2[\"qa_salary_after_1.5_year\"]).to.eql(req_u2.salary*3.3)\r",
							"})\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"check qa_salary_after_3.5_years\", function(){\r",
							"    pm.expect(resp_u2[\"qa_salary_after_3.5_years\"]).to.eql(req_u2.salary*3.8)\r",
							"})\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check person_salary\", function(){\r",
							"    pm.expect(resp_u2[\"person\"][\"u_name\"][1]).to.eql(+req_u2.salary)\r",
							"})\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"check person_age\", function(){\r",
							"    pm.expect(resp_u2[\"person\"][\"u_age\"]).to.eql(+req_u2.age)\r",
							"})\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"check person_salary_5_years\", function(){\r",
							"    pm.expect(resp_u2[\"person\"][\"u_salary_5_years\"]).to.eql(+req_u2.salary*4.2)\r",
							"})\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let obj_k = Object.keys(resp_u2.person)\r",
							"let obj_v = Object.values(resp_u2.person)\r",
							"\r",
							"for (let i = 0; i < obj_k.length; i += 1)\r",
							"    console.log(obj_k[i], obj_v[i])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{Ip_port}}/user_info_2",
					"host": [
						"{{Ip_port}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "vadim",
							"disabled": true
						},
						{
							"key": "age",
							"value": "33",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "500",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "Ip_port",
			"value": "http://162.55.220.72:5005"
		}
	]
}